options(app.prod = FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp('inst/app') # lance l'application
.rs.api.documentSaveAll() # ferme et sauvegarde tous les fichiers ouvert
suppressWarnings(lapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), detach, character.only = TRUE, unload = TRUE))# detache tous les packages
rm(list = ls(all.names = TRUE))# vide l'environneent
devtools::document('.') # genere NAMESPACE et man
devtools::load_all('.') # charge le package
options(app.prod = FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp('inst/app') # lance l'application
.rs.api.documentSaveAll() # ferme et sauvegarde tous les fichiers ouvert
suppressWarnings(lapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), detach, character.only = TRUE, unload = TRUE))# detache tous les packages
rm(list = ls(all.names = TRUE))# vide l'environneent
devtools::document('.') # genere NAMESPACE et man
devtools::load_all('.') # charge le package
options(app.prod = FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp('inst/app') # lance l'application
.rs.api.documentSaveAll() # ferme et sauvegarde tous les fichiers ouvert
suppressWarnings(lapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), detach, character.only = TRUE, unload = TRUE))# detache tous les packages
rm(list = ls(all.names = TRUE))# vide l'environneent
devtools::document('.') # genere NAMESPACE et man
devtools::load_all('.') # charge le package
options(app.prod = FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp('inst/app') # lance l'application
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
str(data(voitures_2014))
View(voitures_2014)
str(voitures_2014)
devtools::load_all(".")
app.voitures::run_app()
voitures_2014 %>%
mutate(cod_cbr = case_when(cod_cbr == "EE" ~ "Essence + Electrique",
cod_cbr == "EH" ~ "Hybride essence élec non rechargeable",
cod_cbr == "EL" ~ "Electrique",
cod_cbr == "ES" ~ "Essence",
cod_cbr %in% c("ES/GN", "GN/ES") ~ "Essence + Gaz naturel",
cod_cbr %in% c("ES/GP", "GP/ES") ~ "Essence + GPL",
cod_cbr == "FE" ~ "Super éthanol",
cod_cbr == "GH" ~ "Hybride gazole élec non rechargeable",
cod_cbr == "GL" ~ "Gazole + Electrique",
cod_cbr == "GN" ~ "Gaz naturel",
cod_cbr == "GO" ~ "Gazole"),
conso_urb = round(as.numeric(conso_urb), 2),
conso_exurb = round(as.numeric(conso_exurb), 2),
conso_mixte = round(as.numeric(conso_mixte), 2),
position_annee = unlist(gregexpr(pattern ='EURO', champ_v9)),
`Année du modèle` = as.numeric(substr(champ_v9, position_annee - 4, position_annee - 1))) -> test
View(test)
View(voitures_2014)
voitures_2014 %>%
mutate(cod_cbr = case_when(cod_cbr == "EE" ~ "Essence + Electrique",
cod_cbr == "EH" ~ "Hybride essence élec non rechargeable",
cod_cbr == "EL" ~ "Electrique",
cod_cbr == "ES" ~ "Essence",
cod_cbr %in% c("ES/GN", "GN/ES") ~ "Essence + Gaz naturel",
cod_cbr %in% c("ES/GP", "GP/ES") ~ "Essence + GPL",
cod_cbr == "FE" ~ "Super éthanol",
cod_cbr == "GH" ~ "Hybride gazole élec non rechargeable",
cod_cbr == "GL" ~ "Gazole + Electrique",
cod_cbr == "GN" ~ "Gaz naturel",
cod_cbr == "GO" ~ "Gazole"),
conso_urb = as.numeric(conso_urb),
conso_exurb = as.numeric(conso_exurb),
conso_mixte = as.numeric(conso_mixte),
position_annee = unlist(gregexpr(pattern ='EURO', champ_v9)),
`Année du modèle` = as.numeric(substr(champ_v9, position_annee - 4, position_annee - 1))) -> test
View(test)
voitures_2014 %>%
mutate(cod_cbr = case_when(cod_cbr == "EE" ~ "Essence + Electrique",
cod_cbr == "EH" ~ "Hybride essence élec non rechargeable",
cod_cbr == "EL" ~ "Electrique",
cod_cbr == "ES" ~ "Essence",
cod_cbr %in% c("ES/GN", "GN/ES") ~ "Essence + Gaz naturel",
cod_cbr %in% c("ES/GP", "GP/ES") ~ "Essence + GPL",
cod_cbr == "FE" ~ "Super éthanol",
cod_cbr == "GH" ~ "Hybride gazole élec non rechargeable",
cod_cbr == "GL" ~ "Gazole + Electrique",
cod_cbr == "GN" ~ "Gaz naturel",
cod_cbr == "GO" ~ "Gazole"),
conso_urb = as.numeric(gsub(conso_urb, ",", ".")),
conso_exurb = as.numeric(conso_exurb),
conso_mixte = as.numeric(conso_mixte),
position_annee = unlist(gregexpr(pattern ='EURO', champ_v9)),
`Année du modèle` = as.numeric(substr(champ_v9, position_annee - 4, position_annee - 1))) -> test
voitures_2014 %>%
mutate(cod_cbr = case_when(cod_cbr == "EE" ~ "Essence + Electrique",
cod_cbr == "EH" ~ "Hybride essence élec non rechargeable",
cod_cbr == "EL" ~ "Electrique",
cod_cbr == "ES" ~ "Essence",
cod_cbr %in% c("ES/GN", "GN/ES") ~ "Essence + Gaz naturel",
cod_cbr %in% c("ES/GP", "GP/ES") ~ "Essence + GPL",
cod_cbr == "FE" ~ "Super éthanol",
cod_cbr == "GH" ~ "Hybride gazole élec non rechargeable",
cod_cbr == "GL" ~ "Gazole + Electrique",
cod_cbr == "GN" ~ "Gaz naturel",
cod_cbr == "GO" ~ "Gazole"),
conso_urb = as.numeric(gsub(",", ".", conso_urb)),
conso_exurb = as.numeric(conso_exurb),
conso_mixte = as.numeric(conso_mixte),
position_annee = unlist(gregexpr(pattern ='EURO', champ_v9)),
`Année du modèle` = as.numeric(substr(champ_v9, position_annee - 4, position_annee - 1))) -> test
View(test)
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
str(voitures_2014)
test %>% transmute(test = as.Date(`Année du modèle`))
?as.Date
test %>% transmute(test = as.Date(`Année du modèle`, "%y"))
as.Date(test[["Année du modèle"]], "%y")
class(test[["Année du modèle"]])
str(voitures_2014)
voitures_2014 %>% ggplot(aes(x = conso_mixte, y = c02)) +
geom_point(aes(color = lib_mrq))
library(ggplot2)
voitures_2014 %>% ggplot(aes(x = conso_mixte, y = c02)) +
geom_point(aes(color = lib_mrq))
library(ggplot2)
voitures_2014 %>% ggplot(aes(x = conso_mixte, y = co2)) +
geom_point(aes(color = lib_mrq))
?sliderInput
View(test)
?replace
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
usethis::use_package("ggplot2")
?radioButtons
?selectInput
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
unique(df_print()[["Type de carburant"]])
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
?checkboxInput
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
library(app.voitures)
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
test <- app.voitures::print_df()
test <- app.voitures::df_print()
test <- app.voitures::df_print()
View(test)
test2 <- voitures_2014
View(test2)
summary(lm(co2 ~ as.factor(carrosserie) + conso_mixte + as.factor(cod_cbr)))
summary(lm(co2 ~ as.factor(carrosserie) + conso_mixte + as.factor(cod_cbr)),
data = test2)
summary(lm(co2 ~ as.factor(Carrosserie) + conso_mixte + as.factor(cod_cbr)),
data = test2)
test <- app.voitures::df_print()
test2 <- voitures_2014
summary(lm(co2 ~ as.factor(Carrosserie) + conso_mixte + as.factor(cod_cbr)),
data = test2)
summary(lm(co2 ~ as.factor(Carrosserie) + conso_mixte + as.factor(cod_cbr),
data = test2))
summary(lm(co2 ~ as.factor(Carrosserie) + as.numeric(conso_mixte) + as.factor(cod_cbr),
data = test2))
model_cv <- caret::train(co2 ~ as.factor(Carrosserie) + as.numeric(conso_mixte) + as.factor(cod_cbr),
data = test2,
na.action  = na.pass,
method = "lm",
trControl = train.control)
train.control <- caret::trainControl(method = "cv", number = 10)
# On entraîne le modèle
model_cv <- caret::train(co2 ~ as.factor(Carrosserie) + as.numeric(conso_mixte) + as.factor(cod_cbr),
data = test2,
na.action  = na.pass,
method = "lm",
trControl = train.control)
train.control <- caret::trainControl(method = "cv", number = 10)
# On entraîne le modèle
model_cv <- caret::train(co2 ~ as.factor(Carrosserie) + as.numeric(conso_mixte) + as.factor(cod_cbr),
data = test2,
na.action  = na.pass,
method = "lm",
trControl = train.control)
# On entraîne le modèle
test2 <- test2 %>% filter_at(vars(Carrosserie, conso_mixte, cod_cbr), any_vars(!is.na))
# On entraîne le modèle
test2 <- test2 %>% filter_at(vars(Carrosserie, conso_mixte, cod_cbr), any_vars( funs(!is.na(.))))
# On entraîne le modèle
test2 <- test2 %>% filter_at(vars(Carrosserie, conso_mixte, cod_cbr), any_vars(~!is.na(.)))
# On entraîne le modèle
test2 <- test2 %>% filter_at(vars(Carrosserie, conso_mixte, cod_cbr), all_vars(!is.na(.)))
test2 <- voitures_2014
# On entraîne le modèle
test2 <- test2 %>% filter_at(vars(Carrosserie, conso_mixte, cod_cbr), all_vars(!is.na(.)))
test2 <- test2 %>% filter_at(vars(co2, Carrosserie, conso_mixte, cod_cbr), all_vars(!is.na(.)))
model_cv <- caret::train(co2 ~ as.factor(Carrosserie) + as.numeric(conso_mixte) + as.factor(cod_cbr),
data = test2,
na.action  = na.pass,
method = "lm",
trControl = train.control)
print(model_cv)
summary(test2$co2)
test <- test %>% filter_at(vars(co2, Carrosserie, conso_mixte, cod_cbr), all_vars(!is.na(.)))
model_cv <- caret::train(co2 ~ as.factor(Carrosserie) + as.numeric(conso_mixte) + as.factor(cod_cbr),
data = test,
na.action  = na.pass,
method = "lm",
trControl = train.control)
print(model_cv)
test2 <- voitures_2014 %>% distinct()
# On entraîne le modèle
test2 <- test2 %>% filter_at(vars(co2, Carrosserie, conso_mixte, cod_cbr), all_vars(!is.na(.))) %>%
select(co2, Carrosserie, conso_mixte, cod_cbr) %>%
distinct()
model_cv <- caret::train(co2 ~ as.factor(Carrosserie) + as.numeric(conso_mixte) + as.factor(cod_cbr),
data = test2,
na.action  = na.pass,
method = "lm",
trControl = train.control)
print(model_cv)
model_cv <- caret::train(co2 ~ as.factor(Carrosserie) + as.factor(cod_cbr),
data = test2,
na.action  = na.pass,
method = "lm",
trControl = train.control)
print(model_cv)
View(test)
# On entraîne le modèle
test2 <- test2 %>% filter_at(vars(co2, Carrosserie, Gamme, conso_mixte, cod_cbr), all_vars(!is.na(.))) %>%
select(co2, Carrosserie, conso_mixte, cod_cbr) %>%
distinct()
model_cv <- caret::train(co2 ~ as.factor(Carrosserie) + as.factor(cod_cbr) + as.factor(Gamme),
data = test2,
na.action  = na.pass,
method = "lm",
trControl = train.control)
print(model_cv)
test2 <- test2 %>% filter_at(vars(co2, Carrosserie, Gamme, conso_mixte, cod_cbr), all_vars(!is.na(.))) %>%
select(co2, CarrosserieGamme,, conso_mixte, cod_cbr) %>%
distinct()
model_cv <- caret::train(co2 ~ as.factor(Carrosserie) + as.factor(cod_cbr) + as.factor(Gamme),
data = test2,
na.action  = na.pass,
method = "lm",
trControl = train.control)
print(model_cv)
# On entraîne le modèle
test2 <- test2 %>% filter_at(vars(co2, Carrosserie, Gamme, conso_mixte, cod_cbr), all_vars(!is.na(.))) %>%
select(co2, Carrosserie, Gamme, conso_mixte, cod_cbr) %>%
distinct()
model_cv <- caret::train(co2 ~ as.factor(Carrosserie) + as.factor(cod_cbr) + as.factor(Gamme),
data = test2,
na.action  = na.pass,
method = "lm",
trControl = train.control)
print(model_cv)
# On entraîne le modèle
test2 <- test2 %>% filter_at(vars(co2, Carrosserie, Gamme, conso_mixte, cod_cbr), all_vars(!is.na(.))) %>%
select(co2, Carrosserie, Gamme, conso_mixte, cod_cbr)
test2 <- voitures_2014 %>% distinct()
test2 <- test2 %>% filter_at(vars(co2, Carrosserie, Gamme, conso_mixte, cod_cbr), all_vars(!is.na(.))) %>%
select(co2, Carrosserie, Gamme, conso_mixte, cod_cbr) %>%
distinct()
test2 <- test2 %>% filter_at(vars(co2, Carrosserie, gamme, conso_mixte, cod_cbr), all_vars(!is.na(.))) %>%
select(co2, Carrosserie, gamme, conso_mixte, cod_cbr) %>%
distinct()
model_cv <- caret::train(co2 ~ as.factor(Carrosserie) + as.factor(cod_cbr) + as.factor(Gamme),
data = test2,
na.action  = na.pass,
method = "lm",
trControl = train.control)
print(model_cv)
summary(test2$co2)
model_cv <- caret::train(co2 ~ as.factor(Carrosserie) + as.factor(cod_cbr) + as.factor(gamme),
data = test2,
na.action  = na.pass,
method = "lm",
trControl = train.control)
print(model_cv)
?radioButtons
devtools::load_all(".")
devtools::load_all(".")
app.voitures::run_app()
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
factor("Moyenne")
predict_conso <- function(train = app.voitures::df_print()){
data_in <- train %>% select(carross = as.factor(Carrosserie),
gamme = as.factor(Gamme),
carbu = as.factor(`Type de carvurant`),
co2 = `Emissions de co2 (en g/km)`)
return(lm(data = data_in, co2 ~ gamme + carbu + co2))
}
modele_pred <- app.voitures::predict_conso()
modele_pred <- predict_conso()
str(app.voitures::df_print())
predict_conso <- function(train = app.voitures::df_print()){
data_in <- train %>% select(carross = as.factor(Carrosserie),
gamme = as.factor(Gamme),
carbu = as.factor(`Type de carvurant`),
co2 = `Émissions de co2 (en g/km)`)
return(lm(data = data_in, co2 ~ gamme + carbu + co2))
}
modele_pred <- predict_conso()
app.voitures::df_print() %>% select(carross = as.factor(Carrosserie),
gamme = as.factor(Gamme),
carbu = as.factor(`Type de carvurant`),
co2 = `Émissions de co2 (en g/km)`)
app.voitures::df_print() %>% transmute(carross = as.factor(Carrosserie),
gamme = as.factor(Gamme),
carbu = as.factor(`Type de carvurant`),
co2 = `Émissions de co2 (en g/km)`)
app.voitures::df_print() %>% transmute(carross = as.factor(Carrosserie),
gamme = as.factor(Gamme),
carbu = as.factor(`Type de carburant`),
co2 = `Émissions de co2 (en g/km)`)
data_in <- app.voitures::df_print() %>% transmute(carross = as.factor(Carrosserie),
gamme = as.factor(Gamme),
carbu = as.factor(`Type de carburant`),
co2 = `Émissions de co2 (en g/km)`)
return(lm(data = data_in, co2 ~ gamme + carbu + co2))
lm(data = data_in, co2 ~ gamme + carbu + co2)
predict_conso <- function(train = app.voitures::df_print()){
data_in <- train %>%
transmute(carross = as.factor(Carrosserie),
gamme = as.factor(Gamme),
carbu = as.factor(`Type de carburant`),
co2 = `Émissions de co2 (en g/km)`)
return(lm(data = data_in, co2 ~ gamme + carbu + co2))
}
modele_pred <- predict_conso()
summary(predict_conso())
predict_conso <- function(train = app.voitures::df_print()){
data_in <- train %>%
transmute(carross = as.factor(Carrosserie),
gamme = as.factor(Gamme),
carbu = as.factor(`Type de carburant`),
co2 = `Émissions de co2 (en g/km)`) %>%
filter_at(vars(carross, gamme, carbu, co2), all_vars(!is.na(.)))
return(lm(data = data_in, co2 ~ gamme + carbu + co2))
}
summary(predict_conso())
train = app.voitures::df_print()
train %>%
transmute(carross = as.factor(Carrosserie),
gamme = as.factor(Gamme),
carbu = as.factor(`Type de carburant`),
co2 = `Émissions de co2 (en g/km)`) %>%
filter_at(vars(carross, gamme, carbu, co2), all_vars(!is.na(.))) -> datain
summary(lm(data = datain, co2 ~ gamme + carbu + co2))
model_cv <- caret::train(co2 ~ as.factor(Carrosserie) + as.factor(cod_cbr) + as.factor(gamme),
data = test2,
na.action  = na.pass,
method = "lm",
trControl = train.control)
print(model_cv)
train %>%
transmute(carross = as.factor(Carrosserie),
gamme = as.factor(Gamme),
carbu = as.factor(`Type de carburant`),
co2 = `Émissions de co2 (en g/km)`) %>%
filter_at(vars(carross, gamme, carbu, co2), all_vars(!is.na(.))) %>%
distinct() -> datain
summary(lm(data = datain, co2 ~ gamme + carbu + co2))
test <- lm(data = datain, co2 ~ gamme + carbu + co2)
predict(test, newdata = as.data.frame(gamme = as.factor("LUXE"),
carbu = as.factor("Essence + Gaz naturel "),
carross = as.factor("BERLINE"))
)
as.data.frame(gamme = as.factor("LUXE"),
carbu = as.factor("Essence + Gaz naturel "),
carross = as.factor("BERLINE"))
newdat <- as.data.frame()
?as.data.frame
newdat <- data.frame()
predict(test, newdata = data.frame(gamme = as.factor("LUXE"),
carbu = as.factor("Essence + Gaz naturel "),
carross = as.factor("BERLINE")))
predict(test, newdata = data.frame(gamme = as.factor("LUXE"),
carbu = as.factor("Essence + Gaz naturel"),
carross = as.factor("BERLINE")))
devtools::load_all(".")
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
test <- predict_conso()
input <- print_df()
input <- df_print()
test <- predict_conso()
input <- df_print()
data <- data.frame(gamme = as.factor("INFERIEURE"),
carbu = as.factor("Essence uniquement"),
carross = as.factor("BERLINE")
)
predict(test, newdata = data)
prediction <- predict(test, newdata = data)
paste0("le résultat est", prediction)
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
test <- app.voitures::df_print()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
summary(predict_conso())
predict(predict_conso, newdata = data.frame(gamme = as.factor("INFERIEURE"),
carbu = as.factor("Essence uniquement"),
carross = as.factor("BERLINE"),
annee = 2009))
predict(predict_conso(), newdata = data.frame(gamme = as.factor("INFERIEURE"),
carbu = as.factor("Essence uniquement"),
carross = as.factor("BERLINE"),
annee = 2009))
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
shiny::runApp('inst/app')
source('inst/dev/run_dev.R')
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
library(app.voitures)
library(rsconnect)
deployApp()
ls()
shiny::runApp('inst/app')
library(app.voitures)
?app.voitures::run_app
??app.voitures::run_app
?app.voitures
library(app.voitures)
app;voitures::run_app()
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
library(app.voitures)
?app.voitures
??app.voitures
library(app.voitures)
library("app.voitures", lib.loc="~/R/win-library/3.5")
detach("package:app.voitures", unload=TRUE)
library("app.voitures", lib.loc="~/R/win-library/3.5")
devtools::document()
library("app.voitures", lib.loc="~/R/win-library/3.5")
app.voitures::run_app()
