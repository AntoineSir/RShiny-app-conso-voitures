.rs.api.documentSaveAll() # ferme et sauvegarde tous les fichiers ouvert
suppressWarnings(lapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), detach, character.only = TRUE, unload = TRUE))# detache tous les packages
rm(list = ls(all.names = TRUE))# vide l'environneent
devtools::document('.') # genere NAMESPACE et man
devtools::load_all('.') # charge le package
options(app.prod = FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp('inst/app') # lance l'application
??shinyApp
usethis::use_package("shiny")
usethis::use_package("graphics")
usethis::use_package("stats")
# usethis::use_package("shiny")
# usethis::use_package("graphics")
# usethis::use_package("stats")
usethis::use_package("stats")
usethis::use_package("DT")
.rs.api.documentSaveAll() # ferme et sauvegarde tous les fichiers ouvert
suppressWarnings(lapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), detach, character.only = TRUE, unload = TRUE))# detache tous les packages
rm(list = ls(all.names = TRUE))# vide l'environneent
devtools::document('.') # genere NAMESPACE et man
devtools::load_all('.') # charge le package
options(app.prod = FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp('inst/app') # lance l'application
.rs.api.documentSaveAll() # ferme et sauvegarde tous les fichiers ouvert
suppressWarnings(lapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), detach, character.only = TRUE, unload = TRUE))# detache tous les packages
rm(list = ls(all.names = TRUE))# vide l'environneent
devtools::document('.') # genere NAMESPACE et man
devtools::load_all('.') # charge le package
options(app.prod = FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp('inst/app') # lance l'application
.rs.api.documentSaveAll() # ferme et sauvegarde tous les fichiers ouvert
suppressWarnings(lapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), detach, character.only = TRUE, unload = TRUE))# detache tous les packages
rm(list = ls(all.names = TRUE))# vide l'environneent
devtools::document('.') # genere NAMESPACE et man
devtools::load_all('.') # charge le package
options(app.prod = FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp('inst/app') # lance l'application
.rs.api.documentSaveAll() # ferme et sauvegarde tous les fichiers ouvert
suppressWarnings(lapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), detach, character.only = TRUE, unload = TRUE))# detache tous les packages
rm(list = ls(all.names = TRUE))# vide l'environneent
devtools::document('.') # genere NAMESPACE et man
devtools::load_all('.') # charge le package
options(app.prod = FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp('inst/app') # lance l'application
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
getwd()
data.table::fread("code brouillon/mars-2014-complete.csv", sep = ",")
data.table::fread("code brouillon/mars-2014-complete.csv", sep = ";")
voitures_2014 <- as_tibble(data.table::fread("code brouillon/mars-2014-complete.csv", sep = ";"))
voitures_2014 <- tibble::as_tibble(data.table::fread("code brouillon/mars-2014-complete.csv", sep = ";"))
View(voitures_2014)
saveRDS(voitures_2014, "data/voitures_2014")
library(dplyr)
voitures_2014 <- tibble::as_tibble(data.table::fread("code brouillon/mars-2014-complete.csv", sep = ";")) %>%
select(-V27, -V28, -V29, -V30)
saveRDS(voitures_2014, "data/voitures_2014")
# pgm d'import des données et sauvegarde en RDS pour la version utilisée par l'application
library(dplyr)
voitures_2014 <- tibble::as_tibble(data.table::fread("code brouillon/mars-2014-complete.csv", sep = ";")) %>%
select(-V27, -V28, -V29, -V30)
saveRDS(voitures_2014, "data/voitures_2014.RDS")
devtools::load_all(".")
data(voitures_2014)
library(app.voitures)
data(voitures_2014)
devtools::use_data(voitures_2014, voitures_2014)
?devtools::use_data
??use_data
usethis::use_data(voitures_2014, voitures_2014)
library(app.voitures)
voitures_2014
??renderDT
run_app <- function() {
shinyApp(ui = app_ui(), server = app_server)
}
run_app()
app.voitures::run_app()
.rs.api.documentSaveAll() # ferme et sauvegarde tous les fichiers ouvert
suppressWarnings(lapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), detach, character.only = TRUE, unload = TRUE))# detache tous les packages
rm(list = ls(all.names = TRUE))# vide l'environneent
devtools::document('.') # genere NAMESPACE et man
devtools::load_all('.') # charge le package
options(app.prod = FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp('inst/app') # lance l'application
test=data("voitures_2014")
View(voitures_2014)
voitures_2014 %>% mutate(test = gregexpr(pattern ='EURO', champ_v9)) -> test
library(dplyr)
voitures_2014 %>% mutate(test = gregexpr(pattern ='EURO', champ_v9)) -> test
View(test)
voitures_2014 %>% mutate(test = gregexpr(pattern ='EURO', champ_v9),
test2 = substr(champ_v9, test-4, test)) -> test
View(test)
voitures_2014 %>% mutate(test = unlist(gregexpr(pattern ='EURO', champ_v9)),
test2 = substr(champ_v9, test-4, test)) -> test
View(test)
voitures_2014 %>% mutate(test = unlist(gregexpr(pattern ='EURO', champ_v9)),
test2 = substr(champ_v9, test-4, test-1)) -> test
View(test)
library(dplyr)
voitures_2014 %>%
mutate(cod_cbr = case_when(cod_cbr == "EE" ~ "Essence + Électrique",
cod_cbr == "EH" ~ "Hybride essence élec non rechargeable",
cod_cbr == "EL" ~ "Électrique",
cod_cbr == "ES" ~ "Essence",
cod_cbr %in% c("ES/GN", "GN/ES") ~ "Essence + Gaz naturel",
cod_cbr %in% c("ES/GP", "GP/ES") ~ "Essence + GPL",
cod_cbr == "FE" ~ "Super éthanol",
cod_cbr == "GH" ~ "Hybride gazole élec non rechargeable",
cod_cbr == "GL" ~ "Gazole + Électrique",
cod_cbr == "GN" ~ "Gaz naturel",
cod_cbr == "GO" ~ "Gazole"),
position_annee = unlist(gregexpr(pattern ='EURO', champ_v9)),
`Année du modèle` = as.numeric(substr(champ_v9, position_annee - 4, position_annee - 1))) %>%
select(Marque = lib_mrq, Modèle = dscom,
`Type de carburant` = cod_cbr,
`Année du modèle`, Carrosserie, Gamme = gamme,
`Consommation urbaine (en l/100km)` = conso_urb,
`Consommation exo-urbaine (en l/100km)` = conso_exurb, `Consommation mixte (en l/100km)` = conso_mixte,
`Émissions de co2 (en g/100km)` = co2
)
usethis::use_package("dplyr")
usethis::use_package("shinythemes")
app.voitures::run_app()
app.voitures::run_app()
.rs.api.documentSaveAll() # ferme et sauvegarde tous les fichiers ouvert
suppressWarnings(lapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), detach, character.only = TRUE, unload = TRUE))# detache tous les packages
rm(list = ls(all.names = TRUE))# vide l'environneent
devtools::document('.') # genere NAMESPACE et man
devtools::load_all('.') # charge le package
options(app.prod = FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp('inst/app') # lance l'application
.rs.api.documentSaveAll() # ferme et sauvegarde tous les fichiers ouvert
suppressWarnings(lapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), detach, character.only = TRUE, unload = TRUE))# detache tous les packages
rm(list = ls(all.names = TRUE))# vide l'environneent
devtools::document('.') # genere NAMESPACE et man
devtools::load_all('.') # charge le package
options(app.prod = FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp('inst/app') # lance l'application
.rs.api.documentSaveAll() # ferme et sauvegarde tous les fichiers ouvert
suppressWarnings(lapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), detach, character.only = TRUE, unload = TRUE))# detache tous les packages
rm(list = ls(all.names = TRUE))# vide l'environneent
devtools::document('.') # genere NAMESPACE et man
devtools::load_all('.') # charge le package
options(app.prod = FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp('inst/app') # lance l'application
.rs.api.documentSaveAll() # ferme et sauvegarde tous les fichiers ouvert
suppressWarnings(lapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), detach, character.only = TRUE, unload = TRUE))# detache tous les packages
rm(list = ls(all.names = TRUE))# vide l'environneent
devtools::document('.') # genere NAMESPACE et man
devtools::load_all('.') # charge le package
options(app.prod = FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp('inst/app') # lance l'application
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
str(data(voitures_2014))
View(voitures_2014)
str(voitures_2014)
devtools::load_all(".")
app.voitures::run_app()
voitures_2014 %>%
mutate(cod_cbr = case_when(cod_cbr == "EE" ~ "Essence + Electrique",
cod_cbr == "EH" ~ "Hybride essence élec non rechargeable",
cod_cbr == "EL" ~ "Electrique",
cod_cbr == "ES" ~ "Essence",
cod_cbr %in% c("ES/GN", "GN/ES") ~ "Essence + Gaz naturel",
cod_cbr %in% c("ES/GP", "GP/ES") ~ "Essence + GPL",
cod_cbr == "FE" ~ "Super éthanol",
cod_cbr == "GH" ~ "Hybride gazole élec non rechargeable",
cod_cbr == "GL" ~ "Gazole + Electrique",
cod_cbr == "GN" ~ "Gaz naturel",
cod_cbr == "GO" ~ "Gazole"),
conso_urb = round(as.numeric(conso_urb), 2),
conso_exurb = round(as.numeric(conso_exurb), 2),
conso_mixte = round(as.numeric(conso_mixte), 2),
position_annee = unlist(gregexpr(pattern ='EURO', champ_v9)),
`Année du modèle` = as.numeric(substr(champ_v9, position_annee - 4, position_annee - 1))) -> test
View(test)
View(voitures_2014)
voitures_2014 %>%
mutate(cod_cbr = case_when(cod_cbr == "EE" ~ "Essence + Electrique",
cod_cbr == "EH" ~ "Hybride essence élec non rechargeable",
cod_cbr == "EL" ~ "Electrique",
cod_cbr == "ES" ~ "Essence",
cod_cbr %in% c("ES/GN", "GN/ES") ~ "Essence + Gaz naturel",
cod_cbr %in% c("ES/GP", "GP/ES") ~ "Essence + GPL",
cod_cbr == "FE" ~ "Super éthanol",
cod_cbr == "GH" ~ "Hybride gazole élec non rechargeable",
cod_cbr == "GL" ~ "Gazole + Electrique",
cod_cbr == "GN" ~ "Gaz naturel",
cod_cbr == "GO" ~ "Gazole"),
conso_urb = as.numeric(conso_urb),
conso_exurb = as.numeric(conso_exurb),
conso_mixte = as.numeric(conso_mixte),
position_annee = unlist(gregexpr(pattern ='EURO', champ_v9)),
`Année du modèle` = as.numeric(substr(champ_v9, position_annee - 4, position_annee - 1))) -> test
View(test)
voitures_2014 %>%
mutate(cod_cbr = case_when(cod_cbr == "EE" ~ "Essence + Electrique",
cod_cbr == "EH" ~ "Hybride essence élec non rechargeable",
cod_cbr == "EL" ~ "Electrique",
cod_cbr == "ES" ~ "Essence",
cod_cbr %in% c("ES/GN", "GN/ES") ~ "Essence + Gaz naturel",
cod_cbr %in% c("ES/GP", "GP/ES") ~ "Essence + GPL",
cod_cbr == "FE" ~ "Super éthanol",
cod_cbr == "GH" ~ "Hybride gazole élec non rechargeable",
cod_cbr == "GL" ~ "Gazole + Electrique",
cod_cbr == "GN" ~ "Gaz naturel",
cod_cbr == "GO" ~ "Gazole"),
conso_urb = as.numeric(gsub(conso_urb, ",", ".")),
conso_exurb = as.numeric(conso_exurb),
conso_mixte = as.numeric(conso_mixte),
position_annee = unlist(gregexpr(pattern ='EURO', champ_v9)),
`Année du modèle` = as.numeric(substr(champ_v9, position_annee - 4, position_annee - 1))) -> test
voitures_2014 %>%
mutate(cod_cbr = case_when(cod_cbr == "EE" ~ "Essence + Electrique",
cod_cbr == "EH" ~ "Hybride essence élec non rechargeable",
cod_cbr == "EL" ~ "Electrique",
cod_cbr == "ES" ~ "Essence",
cod_cbr %in% c("ES/GN", "GN/ES") ~ "Essence + Gaz naturel",
cod_cbr %in% c("ES/GP", "GP/ES") ~ "Essence + GPL",
cod_cbr == "FE" ~ "Super éthanol",
cod_cbr == "GH" ~ "Hybride gazole élec non rechargeable",
cod_cbr == "GL" ~ "Gazole + Electrique",
cod_cbr == "GN" ~ "Gaz naturel",
cod_cbr == "GO" ~ "Gazole"),
conso_urb = as.numeric(gsub(",", ".", conso_urb)),
conso_exurb = as.numeric(conso_exurb),
conso_mixte = as.numeric(conso_mixte),
position_annee = unlist(gregexpr(pattern ='EURO', champ_v9)),
`Année du modèle` = as.numeric(substr(champ_v9, position_annee - 4, position_annee - 1))) -> test
View(test)
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
str(voitures_2014)
test %>% transmute(test = as.Date(`Année du modèle`))
?as.Date
test %>% transmute(test = as.Date(`Année du modèle`, "%y"))
as.Date(test[["Année du modèle"]], "%y")
class(test[["Année du modèle"]])
str(voitures_2014)
voitures_2014 %>% ggplot(aes(x = conso_mixte, y = c02)) +
geom_point(aes(color = lib_mrq))
library(ggplot2)
voitures_2014 %>% ggplot(aes(x = conso_mixte, y = c02)) +
geom_point(aes(color = lib_mrq))
library(ggplot2)
voitures_2014 %>% ggplot(aes(x = conso_mixte, y = co2)) +
geom_point(aes(color = lib_mrq))
?sliderInput
View(test)
?replace
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
usethis::use_package("ggplot2")
?radioButtons
?selectInput
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
unique(df_print()[["Type de carburant"]])
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
?checkboxInput
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
devtools::load_all(".")
app.voitures::run_app()
